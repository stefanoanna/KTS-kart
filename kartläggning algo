import bluetooth
import time
import os
import serial
import struct

# === LIDAR KONFIGURATION ===
LIDAR_PORT = "/dev/ttyUSB0"
LIDAR_BAUDRATE = 460800
CMD_STOP = b'\xA5\x25'
CMD_SCAN = b'\xA5\x20'
check_angles = [i for i in range(0, 360, 45)]

def get_descriptor(ser):
    descriptor = ser.read(7)
    if descriptor[:2] != b'\xA5\x5A':
        raise Exception("Misslyckades med att ta emot scan descriptor")

def parse_packet(packet):
    if len(packet) != 5:
        return None
    b0, b1, b2, b3, b4 = struct.unpack('<BBBBB', packet)
    start_flag = b0 & 0x01
    inverted_start_flag = (b0 >> 1) & 0x01
    if start_flag != (~inverted_start_flag & 0x01):
        return None

    quality = b0 >> 2
    angle_q6 = ((b2 << 7) | (b1 >> 1))
    angle = angle_q6 / 64.0
    dist_q2 = (b4 << 8) | b3
    distance_cm = round((dist_q2 / 4.0) / 10.0)
    return angle, distance_cm, quality

# === BLUETOOTH SERVER START ===
COMMAND_FILE = "command.txt"
server_sock = bluetooth.BluetoothSocket(bluetooth.RFCOMM)
server_sock.bind(("", bluetooth.PORT_ANY))
server_sock.listen(1)

port = server_sock.getsockname()[1]
print(f"[AGV] Bluetooth-server startad på port {port}. Väntar på anslutning...")

try:
    while True:
        client_sock, client_info = server_sock.accept()
        print(f"[AGV] Klient ansluten: {client_info}")
        data_buffer = ""

        try:
            while True:
                data = client_sock.recv(1024).decode("utf-8")
                if not data:
                    break

                data_buffer += data
                lines = data_buffer.strip().splitlines()

                for line in lines:
                    line = line.strip()
                    if not line:
                        continue

                    print(f"[AGV] Mottaget: {line}")

                    # === GOTO-KOMMANDO ===
                    if line.startswith("goto"):
                        coords = line.replace("goto,", "").split(",")
                        x, y = coords if len(coords) == 2 else ("0", "0")
                        print(f"[AGV] Utför: x={x}, y={y}")
                        time.sleep(1.0)

                        with open(COMMAND_FILE, "a") as f:
                            f.write(f"{line}\n")

                        for sline in [f"status,x={x},y={y}", "klart"]:
                            client_sock.send((sline + "\n").encode("utf-8"))
                            print(f"[AGV] Skickar: {sline}")
                        time.sleep(0.5)

                    # === LIDAR-KARTLÄGGNING ===
                    elif line.strip() == "lidar":
                        print("[AGV] Initierar LIDAR-stream till ÖS...")

                        try:
                            with serial.Serial(LIDAR_PORT, LIDAR_BAUDRATE, timeout=1) as ser:
                                ser.write(CMD_STOP)
                                time.sleep(0.1)
                                ser.reset_input_buffer()
                                ser.write(CMD_SCAN)
                                get_descriptor(ser)

                                temp_array = [0] * len(check_angles)
                                current_index = 0

                                while True:
                                    # Kolla om klienten har skickat 'stop'
                                    client_sock.settimeout(0.01)
                                    try:
                                        new_data = client_sock.recv(1024).decode("utf-8").strip()
                                        if "stop" in new_data:
                                            print("[AGV] Mottog STOP - avbryter LIDAR...")
                                            break
                                    except bluetooth.BluetoothError:
                                        pass

                                    packet = ser.read(5)
                                    if len(packet) != 5:
                                        continue

                                    result = parse_packet(packet)
                                    if result is None:
                                        continue

                                    angle, distance_cm, _ = result
                                    angle_rounded = round(angle)
                                    target_angle = check_angles[current_index]

                                    if abs(angle_rounded - target_angle) <= 1:
                                        temp_array[current_index] = round(distance_cm, 1)
                                        current_index += 1

                                        if current_index >= len(check_angles):
                                            current_index = 0
                                            lidar_string = "LIDAR:" + ",".join(map(str, temp_array))
                                            client_sock.send((lidar_string + "\n").encode("utf-8"))
                                            print("[AGV] Skickar:", lidar_string)

                        except Exception as e:
                            print("[AGV] LIDAR-fel:", e)

                        finally:
                            try:
                                ser.write(CMD_STOP)
                                time.sleep(0.1)
                            except:
                                pass

                data_buffer = ""

        except OSError as e:
            print(f"[AGV] Anslutning avslutad ({e})")

        finally:
            client_sock.close()
            print("[AGV] Väntar på ny anslutning...")

except KeyboardInterrupt:
    print("[AGV] Avslutar Bluetooth-server...")
    server_sock.close()
