import bluetooth
import time
import os

COMMAND_FILE = "command.txt"
STATUS_FILE = "status.txt"
MAPPING_FILE = "kartering.txt"

server_sock = bluetooth.BluetoothSocket(bluetooth.RFCOMM)
server_sock.bind(("", bluetooth.PORT_ANY))
server_sock.listen(1)

port = server_sock.getsockname()[1]
print(f"[AGV] Bluetooth-server startad på port {port}. Väntar på anslutning...")

try:
    while True:
        client_sock, client_info = server_sock.accept()
        print(f"[AGV] Klient ansluten: {client_info}")

        data_buffer = ""

        try:
            while True:
                data = client_sock.recv(1024).decode("utf-8")
                if not data:
                    break  # Klienten kopplade ner

                data_buffer += data

                # Om flera kommandon, separera rader
                lines = data_buffer.strip().splitlines()
                for line in lines:
                    line = line.strip()
                    if not line:
                        continue

                    print(f"[AGV] Mottaget: {line}")

                    if line.startswith("goto"):
                        # Simulera körning av detta kommando
                        coords = line.replace("goto,", "").split(",")
                        if len(coords) == 2:
                            x, y = coords
                        else:
                            x, y = "0", "0"

                        print(f"[AGV] Utför: x={x}, y={y}")
                        time.sleep(1.0)
                        
                        with open("command.txt", "a") as f:
                            f.write(f"{line}\n")
                        

                        # Skicka status tillbaka
                        status_lines = [
                            f"status,x={x},y={y}",
                            "klart"
                        ]
                        for sline in status_lines:
                            client_sock.send((sline + "\n").encode("utf-8"))
                            print(f"[AGV] Skickar: {sline}")
                        time.sleep(0.5)
                      
                    elif line.strip() == "lidar":
						print("[AGV] Initierar LIDAR-stream till ÖS...")

						# Starta LIDAR
						with serial.Serial(LIDAR_PORT, LIDAR_BAUDRATE, timeout=1) as ser:
							ser.write(CMD_STOP)
							time.sleep(0.1)
							ser.reset_input_buffer()
							ser.write(CMD_SCAN)
							get_descriptor(ser)

							temp_array = [0] * len(check_angles)
							current_index = 0

							try:
								while True:
									packet = ser.read(5)
									if len(packet) != 5:
										continue

									result = parse_packet(packet)
									if result is None:
										continue

									angle, distance_cm, _ = result
									angle_rounded = round(angle)

									target_angle = check_angles[current_index]
									if abs(angle_rounded - target_angle) <= 1:
										temp_array[current_index] = round(distance_cm, 1)
										current_index += 1

										if current_index >= len(check_angles):
											current_index = 0
											lidar_string = "LIDAR:" + ",".join(map(str, temp_array))
											client_sock.send((lidar_string + "\n").encode("utf-8"))
											print("[AGV] Skickar:", lidar_string)

							except Exception as e:
								print("[AGV] LIDAR-fel:", e)
							finally:
								ser.write(CMD_STOP)
								time.sleep(0.1)
                
           
                data_buffer = ""
                

        except OSError as e:
            print(f"[AGV] Anslutning avslutad ({e})")

        finally:
            client_sock.close()
            print("[AGV] Väntar på ny anslutning...")

except KeyboardInterrupt:
    print("[AGV] Avslutar Bluetooth-server...")
    server_sock.close()
