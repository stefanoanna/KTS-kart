import bluetooth
import time
import os
import serial
import struct
import threading
import math
import numpy as np
from collections import deque

# === CONFIGURATION ===
position_lock = threading.Lock()
# position_buffer_x = deque(maxlen=5) # Not used in provided snippet for this logic
# position_buffer_y = deque(maxlen=5) # Not used
# JUMP_THRESHOLD = 30 # Not used
# SMOOTHING_FACTOR = 0.2 # Not used
x_global, y_global = 80.0, 200.0 # Renamed to avoid conflict with local x, y in dwm_task
lidar_active = False
LIDAR_PORT = "/dev/ttyUSB0"
LIDAR_BAUDRATE = 460800
CMD_STOP = b'\xA5\x25'
CMD_SCAN = b'\xA5\x20'
check_angles = [i for i in range(0, 360, 1)]
esp_serial = serial.Serial('/dev/ttyS0', 115200, timeout=1)

# === Kalman Filter Configuration ===
kalman_x_state = { # Renamed to avoid conflict with global x
    'x': 80.0,
    'v': 0.0,
    'P': np.array([[15, 5], [5, 15]], dtype=np.float32)
}
kalman_y_state = { # Renamed to avoid conflict with global y
    'x': 200.0,
    'v': 0.0,
    'P': np.array([[15, 5], [5, 15]], dtype=np.float32)
}
# Q_global = np.array([[0.5, 0.1], [0.3, 0.2]]) # Defined inside kalman_update or can be passed
# R_base_global = 5.0 # Defined inside kalman_update
# speed_factor_global = 1.5 # Defined inside kalman_update
# dt_global = 0.1 # This will now be dynamic

# kalman_update function now accepts dt as an argument
def kalman_update(kalman_state, acc, dt_actual, measurement=None): # dt_actual is now a parameter
    # Dynamic Q based on speed
    def calculate_dynamic_Q(speed):
        factor = max(1, abs(speed) / 10) # Use abs(speed)
        # Example: Q for process noise - adjust these values based on testing
        # If accelerometer is good, these can be smaller. If model is less certain, larger.
        return np.array([[0.1 * factor, 0], [0, 0.2 * factor]]) # Adjusted example Q

    # Dynamic R based on speed
    def calculate_dynamic_R(speed):
        R_base = 10.0 # How much you trust DWM. Smaller = more trust.
        # speed_factor = 1.0 # This logic can be simplified or adjusted
        # Original: max(R_base / max(speed, 1), 5.0)
        # If speed is 0, R becomes R_base. If speed is high, R decreases.
        # Let's ensure R doesn't become too small. Minimum R could be e.g. 5.0
        return max(R_base / max(abs(speed), 1.0), 5.0) # Use abs(speed), ensure min R

    A = np.array([[1, dt_actual], [0, 1]]) # Use dt_actual
    B = np.array([[0.5 * dt_actual**2], [dt_actual]]) # Use dt_actual
    current_x_matrix = np.array([[kalman_state['x']], [kalman_state['v']]]) # Renamed local x to avoid confusion
    u = np.array([[acc]])

    # Calculate dynamic Q
    current_speed = kalman_state['v'] # Already absolute if v is always positive, or use abs()
    dynamic_Q = calculate_dynamic_Q(current_speed)

    x_pred = A @ current_x_matrix + B @ u
    P_pred = A @ kalman_state['P'] @ A.T + dynamic_Q

    # Dynamic R
    dynamic_R = calculate_dynamic_R(current_speed)

    # Update
    if measurement is not None:
        H = np.array([[1, 0]])
        z = np.array([[measurement]])
        y_residual = z - H @ x_pred # Renamed y to y_residual
        S = H @ P_pred @ H.T + dynamic_R
        
        # Avoid singular matrix for S inverse
        if np.linalg.det(S) == 0: # Check if S is singular
             K = P_pred @ H.T @ np.linalg.pinv(S) # Use pseudo-inverse if singular
        else:
             K = P_pred @ H.T @ np.linalg.inv(S)


        # Adjust Kalman Gain at high speed (optional, can be removed if causing issues)
        if abs(current_speed) > 5: # Use abs(current_speed)
            K = K * 1.2 # Reduced factor, tune or remove

        x_new_state = x_pred + K @ y_residual # Renamed x_new to x_new_state
        P_new = (np.eye(2) - K @ H) @ P_pred
    else:
        x_new_state = x_pred
        P_new = P_pred

    kalman_state['x'] = x_new_state[0, 0]
    kalman_state['v'] = x_new_state[1, 0]
    kalman_state['P'] = P_new

    return kalman_state['x']
    
def get_descriptor(ser):
    descriptor = ser.read(7)
    if len(descriptor) < 7 or descriptor[:2] != b'\xA5\x5A': # Check length too
        raise Exception("Failed to receive scan descriptor")

def update_position(new_x, new_y):
    global x_global, y_global
    with position_lock:
        x_global, y_global = new_x, new_y

def get_position():
    global x_global, y_global
    with position_lock:
        return x_global, y_global
        
def parse_packet(packet):
    if len(packet) != 5:
        return None
    b0, b1, b2, b3, b4 = struct.unpack('<BBBBB', packet)
    start_flag = b0 & 0x01
    inverted_start_flag = (b0 >> 1) & 0x01
    if start_flag != (~inverted_start_flag & 0x01): # Original check, ensure it's correct
        return None
    quality = b0 >> 2
    angle_q6 = ((b2 << 7) | (b1 >> 1))
    angle = (angle_q6 / 64.0) % 360
    dist_q2 = (b4 << 8) | b3
    distance_cm = round((dist_q2 / 4.0) / 10.0) # mm to cm
    return angle, max(0, distance_cm), quality
    
def lidar_task(client_sock):
    global lidar_active
    print("[AGV] LIDAR task started.")
    lidar_active = True
    ser_lidar = None # Define ser_lidar to ensure it's available in finally
    try:
        with serial.Serial(LIDAR_PORT, LIDAR_BAUDRATE, timeout=1) as ser_lidar:
            ser_lidar.write(CMD_STOP)
            time.sleep(0.1)
            ser_lidar.reset_input_buffer()
            ser_lidar.write(CMD_SCAN)
            get_descriptor(ser_lidar)
            temp_array = [0] * len(check_angles)
            current_index = 0
            while lidar_active:
                packet = ser_lidar.read(5)
                if not lidar_active: break # Check again after read
                if len(packet) != 5:
                    continue
                result = parse_packet(packet)
                if result is None:
                    continue
                angle, distance_cm, _ = result # Quality not used here
                angle_rounded = round(angle)
                target_angle = check_angles[current_index] # Assuming angles come in order
                if abs(angle_rounded - target_angle) <= 1: # Allow small deviation
                    temp_array[current_index] = round(distance_cm, 1)
                    current_index += 1
                    if current_index >= len(check_angles):
                        current_index = 0
                        lidar_string = "LIDAR:" + ",".join(map(str, temp_array))
                        try:
                            client_sock.sendall((lidar_string + "\n").encode("utf-8")) # Use sendall
                        except Exception as send_e:
                            print(f"[AGV] LIDAR send error: {send_e}")
                            lidar_active = False # Stop on send error
                            break 
    except serial.SerialException as e:
        print(f"[AGV] LIDAR Serial Error: {e}")
    except Exception as e:
        if lidar_active: # Only print if not an intentional stop
            print(f"[AGV] LIDAR exception: {e}")
    finally:
        if ser_lidar and ser_lidar.is_open:
            try:
                ser_lidar.write(CMD_STOP)
                time.sleep(0.1)
                ser_lidar.close() # Ensure close is called
            except Exception as e_close:
                print(f"[AGV] Exception closing LIDAR: {e_close}")
        lidar_active = False
        print("[AGV] LIDAR task finished.")
        
def dwm_position_task(client_sock):
    # global x_global, y_global # Already global, no need to redeclare unless assigning
    ax, ay = 0.0, 0.0
    
    # --- Fix for dt: Initialize last_update_time before the loop ---

    try:
        # Corrected DWM initialization sequence
        with serial.Serial("/dev/ttyACM0", 115200, timeout=1) as ser_dwm: # Renamed ser to ser_dwm
            ser_dwm.write(b"\r")
            time.sleep(0.1)
            ser_dwm.write(b"\r")
            time.sleep(0.1)
            
            start = time.time()
            while time.time() - start < 2:
                if ser_dwm.in_waiting:
                    line = ser_dwm.readline().decode("utf-8").strip()
                    if "dwm>" in line:
                        break

            ser_dwm.write(b"lep\r")
            time.sleep(0.5)
            print("[AGV] DWM positioning started (using 'lec').")
            last_kalman_filter_update_time = time.time()

            while True:
                # --- Fix for dt: Calculate dt_actual at the start of the loop ---
                current_time = time.time()
                dt_actual = current_time - last_kalman_filter_update_time
                last_kalman_filter_update_time = current_time

                # Prevent dt_actual from being zero or too small
                if dt_actual < 0.001:  # Minimum 1ms
                    dt_actual = 0.001 
                elif dt_actual > 0.5: # Cap dt to prevent instability if there's a long pause
                    print(f"[Kalman] Warning: Long dt_actual: {dt_actual:.3f}s. Capping to 0.5s.")
                    dt_actual = 0.5


                if esp_serial.in_waiting:
                    esp_line = esp_serial.readline().decode("utf-8", errors='ignore').strip() # Added utf-8 and ignore
                    if esp_line.startswith("mpu:"):
                        try:
                            parts = esp_line.replace("mpu:", "").split(",")
                            # Corrected MPU parsing:
                            if len(parts) >= 2: # Expecting at least ax, ay
                                ax = float(parts[0].strip()) # parts[0] is ax
                                ay = float(parts[1].strip()) # parts[1] is ay
                            # else:
                                # print(f"[Kalman] MPU data incomplete: {esp_line}")
                        except ValueError as e:
                            print(f"[Kalman] Value error parsing MPU: {e} from line: {esp_line}")
                        except Exception as e:
                            print(f"[Kalman] General error parsing MPU: {e} from line: {esp_line}")
                
                raw_x_dwm = None # Initialize to None for this iteration
                raw_y_dwm = None
                
                if ser_dwm.in_waiting:
                    line = ser_dwm.readline().decode("utf-8", errors='ignore').strip()
                    # Example DWM output: "POS,0,3.56,7.21,0.89,89" (id,x,y,z,quality)
                    # Adjust parsing based on your DWM module's exact output for "lec"
                    if line.startswith("POS,") or "POS" in line: # More robust check
                        parts = line.split(",")
                        # Assuming X is parts[2] and Y is parts[3] if ID is parts[1]
                        # Or X is parts[1] and Y is parts[2] if no ID after POS,
                        # This depends on your DWM output format.
                        # For "POS,id,X,Y,Z,Q", X is parts[2], Y is parts[3]
                        # For "POS,X,Y,Z,Q", X is parts[1], Y is parts[2]
                        # Let's assume "POS,id,X,Y,Z,Q" or similar with at least 4 useful parts after POS
                        if len(parts) >= 4: # e.g. POS,id,x,y (or POS,x,y,z)
                            try:
                                # Adjust indices based on your DWM's output!
                                # If ID is present: parts[1] is ID, parts[2] is X, parts[3] is Y
                                # If no ID: parts[1] is X, parts[2] is Y
                                # Assuming ID is present for now as an example:
                                raw_x_dwm = float(parts[2]) * 100.0 # m to cm
                                raw_y_dwm = float(parts[3]) * 100.0 # m to cm
                            except ValueError as e:
                                print(f"[Kalman] Value error DWM parsing: {e} from line: {line}")
                                raw_x_dwm = None # Ensure it's None on error
                                raw_y_dwm = None
                            except IndexError as e:
                                print(f"[Kalman] Index error DWM parsing: {e} from line: {line}")
                                raw_x_dwm = None
                                raw_y_dwm = None
                
                # Only update Kalman if we have a DWM measurement for this cycle
                if raw_x_dwm is not None and raw_y_dwm is not None:
                    # Pass dt_actual to kalman_update
                    x_filtered = kalman_update(kalman_x_state, ax, dt_actual, raw_x_dwm)
                    y_filtered = kalman_update(kalman_y_state, ay, dt_actual, raw_y_dwm)
                    
                    current_pos_x, current_pos_y = round(x_filtered, 1), round(y_filtered, 1)
                    update_position(current_pos_x, current_pos_y)
                    try:
                        client_sock.sendall(f"POS:{current_pos_x},{current_pos_y}\r\n".encode("utf-8")) # Use sendall
                    except Exception as send_e:
                        print(f"[AGV] DWM send error: {send_e}")
                        break # Exit loop if client connection fails
                else:
                    # No new DWM measurement, predict only (Kalman without measurement)
                    x_filtered = kalman_update(kalman_x_state, ax, dt_actual, None)
                    y_filtered = kalman_update(kalman_y_state, ay, dt_actual, None)
                    current_pos_x, current_pos_y = round(x_filtered, 1), round(y_filtered, 1)
                    update_position(current_pos_x, current_pos_y)
                    # Optionally send predicted position too, or only send on DWM update
                    try:
                        client_sock.sendall(f"POS:{current_pos_x},{current_pos_y}\r\n".encode("utf-8"))
                    except Exception as send_e:
                        print(f"[AGV] DWM (predict) send error: {send_e}")
                        break


    except serial.SerialException as e:
        print(f"[AGV] DWM SerialException: {e}")
    except Exception as e:
        print(f"[AGV] DWM general exception: {e} (Line: {e.__traceback__.tb_lineno if e.__traceback__ else 'N/A'})")
    finally:
        print("[AGV] DWM position task finished.")
        
def send_move_commands(esp_serial_conn, target_x_str, target_y_str, angle_str): # Renamed esp_serial
    try:
        target_x = float(target_x_str)
        target_y = float(target_y_str)
        angle = float(angle_str)
    except ValueError as e:
        print(f"[AGV] Error converting coordinates: {e}")
        return

    # Send rotation command first
    command_to_send = b''
    if angle == 0: command_to_send = b'0' # Assuming '0' is forward, not no rotation
    elif angle == 45: command_to_send = b'2'
    elif angle == 90: command_to_send = b'3'
    elif angle == 135: command_to_send = b'4'
    elif angle == 180 or angle == -180: command_to_send = b'5'
    elif angle == -45: command_to_send = b'6'
    elif angle == -90: command_to_send = b'7'
    elif angle == -135: command_to_send = b'8'
    else:
        print(f"[AGV] Unknown angle {angle}, not sending rotation command.")
        # If angle 0 means no rotation, then handle forward separately
        # For now, assuming angle 0 is a specific command if needed, or handled by ESP if '0' means forward.

    if command_to_send and command_to_send != b'0': # If it's a rotation command
        print(f"[AGV] Sending rotation command: {command_to_send.decode()} for angle {angle}")
        esp_serial_conn.write(command_to_send)
        # Non-blocking: Pi should not sleep here. ESP will handle rotation duration.
        # Pi will rely on ESP to signal completion or just proceed after a short safety delay if needed.
        # For now, no sleep, assuming ESP is non-blocking.
        time.sleep(0.1) # Very short delay to ensure command is sent/processed by ESP before next
    
    print(f"[AGV] Sending command 'Forward' (0) towards X:{target_x}, Y:{target_y}")
    esp_serial_conn.write(b'0') # Command to move forward

    # Loop to check distance to target
    # This loop needs to be robust.
    DRIVE_STOP_THRESHOLD_CM = 15.0 # Increased threshold slightly
    MAX_DRIVE_ATTEMPTS = 200 # Approx 20 seconds if loop is 0.1s
    attempts = 0
    
    while attempts < MAX_DRIVE_ATTEMPTS:
        current_x, current_y = get_position()
        dx = target_x - current_x
        dy = target_y - current_y
        distance_to_target = math.sqrt(dx**2 + dy**2)

        # print(f"[AGV] To target: X:{current_x:.1f}->{target_x:.1f} (dx:{dx:.1f}), Y:{current_y:.1f}->{target_y:.1f} (dy:{dy:.1f}), Dist:{distance_to_target:.1f}")

        if distance_to_target <= DRIVE_STOP_THRESHOLD_CM:
            print(f"[AGV] Near target (dist {distance_to_target:.1f} cm). Sending STOP (9).")
            esp_serial_conn.write(b'9')
            print(f"[AGV] Target reached.")
            return
        
        time.sleep(0.1) # Control loop frequency
        attempts += 1

    print(f"[AGV] Timeout or max attempts reached trying to reach target. Sending STOP (9).")
    esp_serial_conn.write(b'9')
    
server_sock = bluetooth.BluetoothSocket(bluetooth.RFCOMM)
server_sock.bind(("", bluetooth.PORT_ANY))
server_sock.listen(1)
port = server_sock.getsockname()[1]
uuid = "00001101-0000-1000-8000-00805F9B34FB" 
# Consider advertising the service for easier discovery
# bluetooth.advertise_service(...) 
print(f"[AGV] Bluetooth server started on RFCOMM channel {port}. Waiting for connection...")

try:
    while True:
        client_sock, client_info = server_sock.accept()
        print(f"[AGV] Client connected: {client_info}")
        # Start DWM position task for each client, or manage a single global one
        # For simplicity, starting one per client here. Ensure old ones are handled if needed.
        # Make sure DWM task can handle client_sock closure properly
        dwm_thread = threading.Thread(target=dwm_position_task, args=(client_sock,), daemon=True)
        dwm_thread.start()
        
        data_buffer = ""
        try:
            while True: # Loop for this specific client
                raw_data = client_sock.recv(1024) # Receive raw bytes
                if not raw_data:
                    print("[AGV] Client disconnected (no data).")
                    break 
                
                data_buffer += raw_data.decode("utf-8", errors='ignore') # Decode safely
                
                # Process complete lines
                while '\n' in data_buffer:
                    line, data_buffer = data_buffer.split('\n', 1)
                    line = line.strip() # Remove \r and leading/trailing whitespace
                    if not line: # Skip empty lines
                        continue
                        
                    print(f"[AGV] Received: {line}")
                    if line.startswith("GT"):
                        parts = line.replace("GT,", "").split(",")
                        if len(parts) == 3:
                            target_x_s, target_y_s, V_s = parts
                            # Run send_move_commands in a new thread to keep main BT loop responsive
                            threading.Thread(target=send_move_commands, 
                                             args=(esp_serial, target_x_s, target_y_s, V_s), 
                                             daemon=True).start()
                        else:
                            print(f"[AGV] Invalid GT command: {line}")
                    elif line == "lidar":
                        if not lidar_active: # Start only if not already active
                            threading.Thread(target=lidar_task, args=(client_sock,), daemon=True).start()
                        else:
                            print("[AGV] LIDAR task already running.")
                    elif line == "STOP":
                        print("[AGV] STOP command received. Forwarding to ESP.")
                        esp_serial.write(b'9')
                    elif line == "position":
                        # DWM task is already started on connection. 
                        # This could be used to re-initialize or confirm it's running.
                        if dwm_thread and dwm_thread.is_alive():
                            print("[AGV] DWM position task is active.")
                        else:
                            print("[AGV] DWM position task was not active. Restarting.")
                            dwm_thread = threading.Thread(target=dwm_position_task, args=(client_sock,), daemon=True)
                            dwm_thread.start()
                    # Add other commands here
                # If data_buffer contains partial line, it will be processed in next recv
                
        except bluetooth.btcommon.BluetoothError as e: # More specific BT error
            print(f"[AGV] Bluetooth connection error: {e}")
        except OSError as e: # Catches broken pipe, connection reset
            print(f"[AGV] Client connection OS error: {e}")
        except Exception as e:
            print(f"[AGV] Unexpected error in client loop: {e}")
        finally:
            print(f"[AGV] Closing connection for {client_info}")
            client_sock.close()
            # If DWM/LIDAR tasks are client-specific and need explicit stopping:
            if lidar_active: # Signal lidar_task to stop if it's client specific
                lidar_active = False 
            # dwm_thread is a daemon, will exit when main does or if its loop breaks

except KeyboardInterrupt:
    print("[AGV] Shutting down Bluetooth server...")
finally:
    if 'server_sock' in locals() and server_sock:
        server_sock.close()
    if 'esp_serial' in locals() and esp_serial.is_open:
        esp_serial.close()
    print("[AGV] Server shut down.")
