#include <Wire.h>
#include <MPU9250_asukiaaa.h>

MPU9250_asukiaaa mySensor;

// Offset- och kalibreringsvärden
float gyroX_offset = 0.0;
float gyroY_offset = 0.0;
float gyroZ_offset = 0.0;
float magX_offset = 0.0;
float magY_offset = 0.0;
float magX_scale = 1.0;
float magY_scale = 1.0;

float heading = 0.0;
float alpha = 0.98;  // Kalman/komplementärt filter faktor

unsigned long lastTime = 0;

void setup() {
  Serial.begin(115200);
  Wire.begin(21, 22); // SDA, SCL
  mySensor.setWire(&Wire);
  mySensor.beginAccel();
  mySensor.beginGyro();
  mySensor.beginMag();

  delay(500);
  calibrateGyro();
  calibrateCompass();
  lastTime = millis();

  Serial.println("✅ ESP32 och MPU-9150 redo!");
}

void loop() {
  updateHeading();
  delay(100);
}

// === Kalibrering av Gyro ===
void calibrateGyro() {
  Serial.println("Kalibrerar gyro... håll still!");
  float gx = 0.0, gy = 0.0, gz = 0.0;
  const int samples = 100;

  for (int i = 0; i < samples; i++) {
    mySensor.gyroUpdate();
    gx += mySensor.gyroX();
    gy += mySensor.gyroY();
    gz += mySensor.gyroZ();
    delay(10);
  }

  gyroX_offset = gx / samples;
  gyroY_offset = gy / samples;
  gyroZ_offset = gz / samples;

  Serial.println("✅ Gyro kalibrerat!");
}

// === Kalibrering av Kompass ===
void calibrateCompass() {
  Serial.println("Kalibrerar kompass... rotera i en 8:a");
  float x_min = 32767, x_max = -32767;
  float y_min = 32767, y_max = -32767;
  unsigned long startTime = millis();

  while (millis() - startTime < 10000) {
    mySensor.magUpdate();
    float mx = mySensor.magX();
    float my = mySensor.magY();

    if (mx < x_min) x_min = mx;
    if (mx > x_max) x_max = mx;
    if (my < y_min) y_min = my;
    if (my > y_max) y_max = my;

    delay(50);
  }

  magX_offset = (x_max + x_min) / 2;
  magY_offset = (y_max + y_min) / 2;
  magX_scale = (x_max - x_min) / 2.0;
  magY_scale = (y_max - y_min) / 2.0;

  Serial.println("✅ Kompass kalibrerad!");
  Serial.print("Mag X offset: "); Serial.println(magX_offset);
  Serial.print("Mag Y offset: "); Serial.println(magY_offset);
}

// === Beräkna Kalibrerad Kompassvinkel ===
float getCalibratedHeading(float mx, float my) {
  // Korrigera offset och skala
  float mx_corr = (mx - magX_offset) / magX_scale;
  float my_corr = (my - magY_offset) / magY_scale;

  // Beräkna kompassvinkel och invertera om riktningen är fel
  float heading = atan2(my_corr, mx_corr) * 180 / PI;
  heading = -heading;

  if (heading < 0) heading += 360;
  return heading;
}

// === Uppdatera Vinkeln ===
void updateHeading() {
  mySensor.gyroUpdate();
  mySensor.magUpdate();

  float gz = (mySensor.gyroZ() - gyroZ_offset) * 0.0175;  // Konvertera till grader/s
  float mx = mySensor.magX();
  float my = mySensor.magY();

  unsigned long currentTime = millis();
  float deltaTime = (currentTime - lastTime) / 1000.0;
  lastTime = currentTime;

  float gyroDelta = gz * deltaTime;

  // Få kompassens riktning
  float compassHeading = getCalibratedHeading(mx, my);

  // Komplementärt filter för stabilisering
  heading = alpha * (heading + gyroDelta) + (1 - alpha) * compassHeading;

  // Normalisera vinkeln till [0, 360)
  if (heading < 0) heading += 360;
  if (heading >= 360) heading -= 360;

  // Skriva ut vinkel
  Serial.print("Vinkel: ");
  Serial.println(heading);
  Serial2.print("ANGLE:");
  Serial2.println(heading);
}
